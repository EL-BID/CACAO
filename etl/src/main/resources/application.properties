# This application name. Also used as the 'service ID' for 'auto discovery' at 'Eureka'.
spring.application.name=CACAO_ETL

# Provide the URL for registering itself as a service at Eureka Server
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
# Indicates the interval of heartbeats that the client sends to the server
eureka.instance.leaseRenewalIntervalInSeconds=5
# Indicates the time in seconds that the Eureka server waits since it received the last heartbeat from a client before it can remove that client from its registry
eureka.instance.leaseExpirationDurationInSeconds=10

# Active profile
spring.profiles.active=default

# Port number for use with embedded Tomcat (ignored if this application is deployed as WAR file)
server.port=8888

support.email=gustavohbf@gmail.com

# Hostname of ElasticSearch Service
es.host=127.0.0.1

# Port number of ElasticSearch Service
es.port=9200

# Hostname of Kibana Service
kibana.host=127.0.0.1

# Port number of Kibana Service
kibana.port=5601

# Endpoint of Kibana Service (external address redirected from local proxy)
kibana.endpoint=/kibana

# Local link for Kibana Service (either the location of local proxy or some other external URL)
kibana.menu.link=/kibana

# Default page size for all pages
default.page.size=5

# Configuration for running this application behind a reverse proxy
server.forward-headers-strategy=native
server.tomcat.remote-ip-header=x-forwarded-for
server.tomcat.protocol-header=x-forwarded-proto

# Set to 'false' if you want to make it possible to update Thymeleaf templates on the fly in development environment
spring.thymeleaf.cache=true

# Set to positive number of minutes if you want SPRING to reload periodically the information stored at message properties
# Set to 0 to keep unchanged (i.e. the application loads message properties only once)
auto.reload.properties=0

spring.servlet.multipart.max-file-size=1GB

spring.servlet.multipart.max-request-size=1GB

# Enable response compression
server.compression.enabled=true

# Coma-separated list of mime types that should be compressed
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json

# Compress the response only if the response size is at least 1 KB
server.compression.min-response-size=1024

# Enable HTTP/2 support, if the current environment supports it
server.http2.enabled=true

# maximum amount of time the server will wait for the client to make their request after connecting before the connection is closed
server.connection-timeout=300000

# Connection timeout for use of ElasticSearch REST API
spring.elasticsearch.rest.connection-timeout=5m
spring.elasticsearch.connection-timeout=5m
spring.elasticsearch.socket-timeout=5m

# enable periodic resource monitor metrics collector
#resource.monitor=true

# Spring cloud stream topics properties
spring.cloud.stream.bindings.receiveValidatedFile-in-0.destination=validated-files
spring.cloud.stream.bindings.receiveValidatedFile-in-0.group=load
spring.cloud.stream.bindings.receiveValidatedFile-out-0.destination=processed-files
spring.cloud.stream.bindings.receiveValidatedFile-out-0.group=publish

# Minimum number of partitions for every KAFKA topic
# Specific KAFKA topics may have a higher number of partitions using the 'spring.cloud.stream.bindings.<binding-name>.producer.partition-count' property
spring.cloud.stream.kafka.binder.min-partition-count=10

# The number of threads that will be used for each KAFKA consumer group
# Should be less or equal to the number of partitions per topic
spring.cloud.stream.default.consumer.concurrency=4

# In the case the KAFKA topic already exists, let the application increase the number of partitions if necessary
spring.cloud.stream.kafka.binder.autoAddPartitions=true

# Location of KAFKA Brokers (may be overridden in production environment, see 'KAFKA_BROKERS' at Dockerfile and setup.sh)
spring.cloud.stream.kafka.binder.brokers=localhost:9092

# KAFKA Max poll interval in milliseconds (default: 300000)
spring.kafka.consumer.properties.max.poll.interval.ms=900000

# KAFKA Request timeout in milliseconds (default: 40000)
spring.kafka.consumer.properties.request.timeout.ms=300000

# KAFKA Heartbeat interval in milliseconds (default: 3000)
spring.kafka.consumer.properties.heartbeat.interval.ms=1000

# KAFKA Session timeout in milliseconds (default: 10000)
spring.kafka.consumer.properties.session.timeout.ms=600000

# KAFKA Maximum poll records (default: 500)
spring.kafka.consumer.properties.max.poll.records=100

# documents storage
storage.incoming.files.original.dir=/var/cacao/incoming_files/original
